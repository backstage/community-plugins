/*
 * Copyright 2024 The Backstage Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { KIALI_RELATED_LABEL, KIALI_WIZARD_LABEL } from '../constants';
import {
  DestinationRule,
  DestinationRuleSpec,
  Gateway,
  K8sGateway,
  K8sHTTPRoute,
  K8sMetadata,
  VirtualService,
} from '../types';

export class DestinationRuleC implements DestinationRule {
  metadata: K8sMetadata = { name: '' };
  spec: DestinationRuleSpec = {};
  apiVersion: string = '';
  kind: string = '';

  constructor(dr: DestinationRule) {
    Object.assign(this, dr);
  }

  static fromDrArray(drs: DestinationRule[]) {
    return drs.map(item => new DestinationRuleC(item));
  }

  hasPeerAuthentication(): string {
    if (
      !!this.metadata &&
      !!this.metadata.annotations &&
      this.metadata.annotations[KIALI_RELATED_LABEL] !== undefined
    ) {
      const anno = this.metadata.annotations[KIALI_RELATED_LABEL];
      const parts = anno.split('/');
      if (parts.length > 1) {
        return parts[1];
      }
    }
    return '';
  }
}

export function getWizardUpdateLabel(
  vs: VirtualService | VirtualService[] | null,
  k8sr: K8sHTTPRoute | K8sHTTPRoute[] | null,
) {
  let label = getVirtualServiceUpdateLabel(vs);
  if (label === '') {
    label = getK8sHTTPRouteUpdateLabel(k8sr);
  }
  return label;
}

export function getVirtualServiceUpdateLabel(
  vs: VirtualService | VirtualService[] | null,
) {
  if (!vs) {
    return '';
  }

  let virtualService: VirtualService | null = null;
  if ('length' in vs) {
    if (vs.length === 1) {
      virtualService = vs[0];
    }
  } else {
    virtualService = vs;
  }

  if (
    virtualService &&
    virtualService.metadata.labels &&
    virtualService.metadata.labels[KIALI_WIZARD_LABEL]
  ) {
    return virtualService.metadata.labels[KIALI_WIZARD_LABEL];
  }
  return '';
}

export function getK8sHTTPRouteUpdateLabel(
  k8sr: K8sHTTPRoute | K8sHTTPRoute[] | null,
) {
  if (!k8sr) {
    return '';
  }

  let k8sHTTPRoute: K8sHTTPRoute | null = null;
  if ('length' in k8sr) {
    if (k8sr.length === 1) {
      k8sHTTPRoute = k8sr[0];
    }
  } else {
    k8sHTTPRoute = k8sr;
  }

  if (
    k8sHTTPRoute &&
    k8sHTTPRoute.metadata.labels &&
    k8sHTTPRoute.metadata.labels[KIALI_WIZARD_LABEL]
  ) {
    return k8sHTTPRoute.metadata.labels[KIALI_WIZARD_LABEL];
  }
  return '';
}

export function getGatewaysAsList(gws: Gateway[]): string[] {
  return gws
    .map(gateway => `${gateway.metadata.namespace}/${gateway.metadata.name}`)
    .sort((a, b) => a.localeCompare(b));
}

export function filterAutogeneratedGateways(gws: Gateway[]): Gateway[] {
  return gws.filter(
    gateway => !gateway.metadata.name.includes('autogenerated-k8s'),
  );
}

export function getK8sGatewaysAsList(k8sGws: K8sGateway[]): string[] {
  if (k8sGws) {
    return k8sGws
      .map(gateway => `${gateway.metadata.namespace}/${gateway.metadata.name}`)
      .sort((a, b) => a.localeCompare(b));
  }
  return [];
}
