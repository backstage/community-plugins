/*
 * Copyright 2024 The Backstage Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { createTranslationRef } from '@backstage/core-plugin-api/alpha';

// CRITICAL: Export messages separately for testing
export const topologyMessages = {
  page: {
    title: 'Topology',
    subtitle: 'Kubernetes workload topology visualization',
  },
  toolbar: {
    cluster: 'Cluster',
    selectCluster: 'Select Cluster',
    displayOptions: 'Display options',
    currentDisplayOptions: 'Current display options',
  },
  emptyState: {
    noResourcesFound: 'No resources found',
    noResourcesDescription:
      'No Kubernetes resources were found in the selected cluster.',
  },
  permissions: {
    missingPermission: 'Missing Permission',
    missingPermissionDescription:
      'To view Topology, your administrator must grant you {{permissions}} {{permissionText}}.',
    permission: 'permission',
    permissions: 'permissions',
    goBack: 'Go back',
  },
  sideBar: {
    details: 'Details',
    resources: 'Resources',
    logs: 'Logs',
    events: 'Events',
    overview: 'Overview',
    pods: 'Pods',
    services: 'Services',
    routes: 'Routes',
    ingresses: 'Ingresses',
    configMaps: 'ConfigMaps',
    secrets: 'Secrets',
    persistentVolumeClaims: 'Persistent Volume Claims',
  },
  workload: {
    deployment: 'Deployment',
    daemonSet: 'DaemonSet',
    statefulSet: 'StatefulSet',
    job: 'Job',
    cronJob: 'CronJob',
    pod: 'Pod',
    virtualMachine: 'Virtual Machine',
    replicaSet: 'ReplicaSet',
  },
  status: {
    running: 'Running',
    pending: 'Pending',
    succeeded: 'Succeeded',
    failed: 'Failed',
    unknown: 'Unknown',
    terminating: 'Terminating',
    crashLoopBackOff: 'CrashLoopBackOff',
    error: 'Error',
    warning: 'Warning',
    ready: 'Ready',
    notReady: 'Not Ready',
    active: 'Active',
    inactive: 'Inactive',
    updating: 'Updating',
    evicted: 'Evicted',
    cancelled: 'Cancelled',
  },
  details: {
    name: 'Name',
    namespace: 'Namespace',
    labels: 'Labels',
    annotations: 'Annotations',
    createdAt: 'Created',
    age: 'Age',
    replicas: 'Replicas',
    availableReplicas: 'Available Replicas',
    readyReplicas: 'Ready Replicas',
    updatedReplicas: 'Updated Replicas',
    selector: 'Selector',
    strategy: 'Strategy',
    image: 'Image',
    ports: 'Ports',
    volumes: 'Volumes',
    volumeMounts: 'Volume Mounts',
    environmentVariables: 'Environment Variables',
    resourceRequirements: 'Resource Requirements',
    limits: 'Limits',
    requests: 'Requests',
    cpu: 'CPU',
    memory: 'Memory',
    storage: 'Storage',
    noLabels: 'No labels',
    noAnnotations: 'No annotations',
    noOwner: 'No owner',
    notAvailable: 'Not available',
    notConfigured: 'Not configured',
    updateStrategy: 'Update strategy',
    maxUnavailable: 'Max unavailable',
    maxSurge: 'Max surge',
    progressDeadlineSeconds: 'Progress deadline seconds',
    minReadySeconds: 'Min ready seconds',
    desiredCompletions: 'Desired completions',
    parallelism: 'Parallelism',
    activeDeadlineSeconds: 'Active deadline seconds',
    currentCount: 'Current count',
    desiredCount: 'Desired count',
    schedule: 'Schedule',
    concurrencyPolicy: 'Concurrency policy',
    startingDeadlineSeconds: 'Starting deadline seconds',
    lastScheduleTime: 'Last schedule time',
    maxSurgeDescription: '{{maxSurge}} greater than {{replicas}} pod',
    maxUnavailableDescription: '{{maxUnavailable}} of {{replicas}} pod',
  },
  logs: {
    download: 'Download',
    noLogsFound: 'No logs found',
    selectContainer: 'Select Container',
    container: 'Container',
    pod: 'Pod',
    showPrevious: 'Show Previous',
    follow: 'Follow',
    refresh: 'Refresh',
    timestamps: 'Timestamps',
    wrapLines: 'Wrap Lines',
    clearLogs: 'Clear Logs',
    logLevel: 'Log Level',
    search: 'Search',
    noMatchingLogs: 'No matching logs found',
  },
  resources: {
    noResourcesFound: 'No {{resourceType}} found for this resource.',
    showingLatest: 'Showing latest {{count}} {{resourceType}}',
  },
  time: {
    seconds: 'seconds',
    minutes: 'minutes',
    hours: 'hours',
    days: 'days',
  },
  events: {
    type: 'Type',
    reason: 'Reason',
    message: 'Message',
    source: 'Source',
    firstSeen: 'First Seen',
    lastSeen: 'Last Seen',
    count: 'Count',
    noEventsFound: 'No events found',
  },
  filters: {
    showLabels: 'Show Labels',
    showPodCount: 'Show Pod Count',
    expandApplicationGroups: 'Expand Application Groups',
    showConnectors: 'Show Connectors',
  },
  common: {
    loading: 'Loading...',
    retry: 'Retry',
    close: 'Close',
    status: 'Status',
    owner: 'Owner',
    location: 'Location',
    open: 'Open',
    expand: 'Expand',
    collapse: 'Collapse',
    view: 'View',
    viewLogs: 'View Logs',
    edit: 'Edit',
    delete: 'Delete',
    create: 'Create',
    update: 'Update',
    save: 'Save',
    cancel: 'Cancel',
    confirm: 'Confirm',
    yes: 'Yes',
    no: 'No',
    ok: 'OK',
    apply: 'Apply',
    reset: 'Reset',
    clear: 'Clear',
    filter: 'Filter',
    sort: 'Sort',
    export: 'Export',
    import: 'Import',
    copy: 'Copy',
    paste: 'Paste',
    cut: 'Cut',
    undo: 'Undo',
    redo: 'Redo',
    select: 'Select',
    selectAll: 'Select All',
    deselectAll: 'Deselect All',
    none: 'None',
    all: 'All',
    more: 'More',
    less: 'Less',
    show: 'Show',
    hide: 'Hide',
    enable: 'Enable',
    disable: 'Disable',
    off: 'Off',
    true: 'True',
    false: 'False',
    active: 'Active',
    inactive: 'Inactive',
    online: 'Online',
    offline: 'Offline',
    connected: 'Connected',
    disconnected: 'Disconnected',
    available: 'Available',
    unavailable: 'Unavailable',
    healthy: 'Healthy',
    unhealthy: 'Unhealthy',
    normal: 'Normal',
    critical: 'Critical',
    high: 'High',
    medium: 'Medium',
    low: 'Low',
    info: 'Info',
    debug: 'Debug',
    trace: 'Trace',
    today: 'Today',
    yesterday: 'Yesterday',
    thisWeek: 'This Week',
    lastWeek: 'Last Week',
    thisMonth: 'This Month',
    lastMonth: 'Last Month',
    thisYear: 'This Year',
    lastYear: 'Last Year',
    never: 'Never',
    always: 'Always',
    sometimes: 'Sometimes',
    often: 'Often',
    rarely: 'Rarely',
    frequently: 'Frequently',
    occasionally: 'Occasionally',
    daily: 'Daily',
    weekly: 'Weekly',
    monthly: 'Monthly',
    yearly: 'Yearly',
    hourly: 'Hourly',
    minutely: 'Minutely',
    seconds: 'Seconds',
    minutes: 'Minutes',
    hours: 'Hours',
    days: 'Days',
    weeks: 'Weeks',
    months: 'Months',
    years: 'Years',
    ago: 'ago',
    from: 'from',
    to: 'to',
    at: 'at',
    in: 'in',
    on: 'on',
    by: 'by',
    for: 'for',
    with: 'with',
    without: 'without',
    and: 'and',
    or: 'or',
    not: 'not',
    is: 'is',
    are: 'are',
    was: 'was',
    were: 'were',
    has: 'has',
    have: 'have',
    had: 'had',
    will: 'will',
    would: 'would',
    could: 'could',
    should: 'should',
    may: 'may',
    might: 'might',
    can: 'can',
    cannot: 'cannot',
    must: 'must',
    shall: 'shall',
    do: 'do',
    does: 'does',
    did: 'did',
    done: 'done',
    get: 'get',
    set: 'set',
    put: 'put',
    post: 'post',
    patch: 'patch',
    head: 'head',
    options: 'options',
    connect: 'connect',
  },
  bootOrder: {
    summary: 'Boot Order Summary',
    emptySummary: 'No boot order configured',
    disk: 'Disk',
    network: 'Network',
    cdrom: 'CD-ROM',
  },
  vm: {
    status: {
      starting: 'Starting',
      stopping: 'Stopping',
      stopped: 'Stopped',
      paused: 'Paused',
      migrating: 'Migrating',
      provisioning: 'Provisioning',
      errorUnschedulable: 'ErrorUnschedulable',
      errorImagePull: 'ErrorImagePull',
      imageNotReady: 'ImageNotReady',
      waitingForVolumeBinding: 'WaitingForVolumeBinding',
    },
  },
};

/**
 * Translation reference for the Topology plugin.
 * @public
 */
export const topologyTranslationRef = createTranslationRef({
  id: 'plugin.topology',
  messages: topologyMessages,
});
